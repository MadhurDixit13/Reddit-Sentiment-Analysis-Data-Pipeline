name: CI/CD for Airflow & Streamlit

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Airflow Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/airflow:latest

      - name: Build and push Streamlit Dashboard image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./StreamlitDockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/streamlit-dashboard:latest

  deploy-render:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Render CLI
        run: |
          curl -L https://github.com/render-oss/cli/releases/download/v1.1.0/cli_1.1.0_linux_amd64.zip -o render.zip
          unzip -o render.zip
          sudo mv cli_v1.1.0 /usr/local/bin/render
          render --version  # âœ… Verify installation

      - name: Debug Render API Response (Print All Services)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "ðŸ”¹ Fetching all services from Render API..."
          RESPONSE=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
                          -H "Accept: application/json" \
                          https://api.render.com/v1/services)

          echo "â¬‡ Full Render API Response â¬‡"
          echo "$RESPONSE" | jq  # Pretty print JSON

      - name: Configure SSH for Render
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.RENDER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ssh.oregon.render.com >> ~/.ssh/known_hosts  # âœ… Use correct SSH host

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: srv-cul474btq21c73bntqb0  # âœ… Correct Service ID
        run: |
          render deploys create $RENDER_SERVICE_ID --output json --confirm

  deploy-ec2:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      
      - name: Install Docker & Docker Compose (if not installed) and Fix Permissions
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            # Install Docker if not installed
            if ! command -v docker &> /dev/null
            then
              echo "Installing Docker..."
              sudo amazon-linux-extras enable docker
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "Docker is already installed."
            fi
            
            # Install Docker Compose if not installed
            if ! command -v docker-compose &> /dev/null
            then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            else
              echo "Docker Compose is already installed."
            fi
            
            # Ensure the user has Docker permissions
            sudo usermod -aG docker ec2-user
            newgrp docker
          EOF
      
      - name: Fix Permissions on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sudo chown -R $(whoami):$(whoami) /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/
            sudo chmod -R 775 /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/
          EOF

      - name: Sync Project Files to EC2
        run: |
          rsync -avz --exclude '.git' --exclude 'node_modules' -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/
        
      - name: Fix Docker Permissions on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sudo usermod -aG docker ec2-user
            sudo systemctl restart docker
          EOF
        
      - name: Fix Permissions on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sudo chown -R ec2-user:ec2-user /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline
            sudo chmod -R 755 /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline
          EOF

      - name: Write GitHub Secrets to .env File on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            echo "AIRFLOW_UID=50000" > /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/.env
            echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/.env
            echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/.env
            echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/.env
            echo "REDDIT_CLIENT_ID=${{ secrets.REDDIT_CLIENT_ID }}" >> /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/.env
            echo "REDDIT_CLIENT_SECRET=${{ secrets.REDDIT_CLIENT_SECRET }}" >> /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/.env
            echo "REDDIT_USER_AGENT=${{ secrets.REDDIT_USER_AGENT }}" >> /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/.env
            echo "REDDIT_USERNAME=${{secrets.REDDIT_USERNAME}}" >> /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/.env
            echo "REDDIT_USERNAME=${{secrets.REDDIT_PASSWORD}}" >> /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/.env
            chmod 600 /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/.env
          EOF

      - name: SSH into the Server and Deploy
        run: |
          ssh -t -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.SERVER_IP }} << 'EOF'
            cd /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/ || exit 1
            if [ ! -f "docker-compose.yaml" ]; then
              echo "ERROR: docker-compose.yaml not found!"
              exit 1
            fi
            docker-compose -f docker-compose.yaml down
            docker-compose -f docker-compose.yaml up -d
            docker system prune -f
          EOF


      - name: Verify Running Containers
        run: |
          ssh -t -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/ && docker ps --format 'table {{.Names}}\t{{.Status}}'"

      - name: Set Airflow Secrets
        run: |
          ssh -t -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.SERVER_IP }} << 'EOF'
            cd /home/ec2-user/Reddit-Sentiment-Analysis-Data-Pipeline/ || exit 1
            if [ ! -f ".env" ]; then
              echo "ERROR: .env not found!"
              exit 1
            fi
            docker-compose -f docker-compose.yaml exec airflow-webserver airflow variables set AWS_ACCESS_KEY "${{ secrets.AWS_ACCESS_KEY }}"
            docker-compose -f docker-compose.yaml exec airflow-webserver airflow variables set AWS_SECRET_KEY "${{ secrets.AWS_SECRET_KEY }}"
            docker-compose -f docker-compose.yaml exec airflow-webserver airflow variables set S3_BUCKET_NAME "${{ secrets.S3_BUCKET_NAME }}"
            docker-compose -f docker-compose.yaml exec airflow-webserver airflow variables set REDDIT_CLIENT_ID "${{ secrets.REDDIT_CLIENT_ID }}"
            docker-compose -f docker-compose.yaml exec airflow-webserver airflow variables set REDDIT_CLIENT_SECRET "${{ secrets.REDDIT_CLIENT_SECRET }}"
            docker-compose -f docker-compose.yaml exec airflow-webserver airflow variables set REDDIT_USER_AGENT "${{ secrets.REDDIT_USER_AGENT }}"
            docker-compose -f docker-compose.yaml exec airflow-webserver airflow variables set REDDIT_USERNAME "${{ secrets.REDDIT_USERNAME }}"
            docker-compose -f docker-compose.yaml exec airflow-webserver airflow variables set REDDIT_PASSWORD "${{ secrets.REDDIT_PASSWORD }}"
          EOF
